This source provides a quick reference, or "cheat sheet," for common tasks in data analytics using Python. It highlights essential libraries like Pandas for data manipulation, NumPy for numerical operations, and Matplotlib/Seaborn for visualisation. The document concisely covers how to load, explore, select, modify, group, and sort data using Pandas, along with fundamental mathematical functions in NumPy and various plotting techniques. Overall, it serves as a handy guide to key commands and concepts for working with data in Python.
Python Cheat Sheet for Data Analytics covering essential libraries, commands, and concepts:
🐍 Basics
# Importing
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

📊 Pandas: Data Manipulation
Loading Data
df = pd.read_csv("file.csv") # Read CSV
df.to_csv("out.csv", index=False) # Save to CSV(EXCEL to CSV)
Exploring Data
df.head() # First 5 rows
df.tail() # Last 5 rows
df.info() # Data types & non-null counts
df.describe() # Summary statistics
df.columns # Column names
df.shape # Rows & columns count
df.dtypes # Data types
df.size  # no of values


Selecting Data
df['col'] # Single column
df[['col1', 'col2']] # Multiple columns
df.iloc[0] # Row by index
df.loc[0, 'col'] # Specific value
Filtering & Querying
df[df['col'] > 100] # Condition
df.query("col > 100 and col2 == 'A'") # SQL-like

Modifying Data
df['new'] = df['col1'] + df['col2'] # New column
df.rename(columns={'old': 'new'}) # Rename
df.drop(columns=['col']) # Drop column
df.dropna() # Drop missing
df.fillna(0) # Fill missing
df.astype({'col': 'int'}) # Convert type
Grouping & Aggregation
df.groupby('category').mean()
df.pivot_table(values='sales', index='region', columns='year', aggfunc='sum')
Sorting
df.sort_values(by='col', ascending=False)

🔢 NumPy: Numerical Operations
a = np.array([1, 2, 3])  # 1D array   (list)
a = np.array([[1, 2, 3]])  # 2D array  (list of list)
np.mean(a) # Mean
np.median(a) # Median
np.std(a) # Standard deviation
np.sum(a) # Sum
np.arange(0, 10, 2) # [0 2 4 6 8] ---- .arange(include,exclude,step)
np.linspace(0, 1, 5) # [0. 0.25 0.5 0.75 1.] 
np.percentile(a,0.25)   # 25% percentile
np.matmul(()) # matrix multplication
shape:
np.reshape((row,col))
np.ravel()

📈 Matplotlib & Seaborn: Visualization
Matplotlib
plt.plot(df['col'])   #x-axis:time series, y-axis:numerical
plt.scatter(x, y)     #x-axis:numerical, y-axis:numerical
plt.bar(x, height)      #x-axis:categorical variable/column, y-axis:numerical
plt.hist(df['col'], bins=10)   #x-axis:numerical
plt.title("Title")           #title of the plot 
plt.xlabel("X")
plt.ylabel("Y")
plt.show()

Seaborn
sns.histplot(df['col'])         #x-axis:numerical, kde=True
sns.boxplot(x='col1', y='col2', data=df)    #x-axis:categorical variable/column, y-axis:numerical
sns.heatmap(df.corr(), annot=True, cmap="coolwarm")   # correlation matrix 
sns.pairplot(df)                  

🧹 Data Cleaning Tips
df.duplicated().sum() # Check duplicates #.sum() gives the count
df.drop_duplicates() # Drop duplicates
df['col'].str.lower() # Lowercase text
df['col'].str.contains('txt') # Text contains
df['col']=df['col'].str.strip().str.title()   # 1st letter capital in each word of the column
df['col']=df['col'].str.strip().str.title()   # 1st letter only capital 

🧠 Statistical Summary
df['col'].value_counts() # Frequency count
df['col'].unique() # Unique values
df['col'].nunique() # number of unique 

bivariate---2 numerical caolumns
df.cov() # Correlation matrix  --- range(-infinity, infinity)
df.corr() # Correlation matrix  --- range[-1,1]




step 2:ANALYSIS TECHNIQUES CHEATSEET(UNI ,BI,MULTI VARIATE )


